
# 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
#
# qwen/qwen3-4b:free

import telebot
import requests
import json
import time
import threading

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = ""
OPENROUTER_API_KEY = ""
MODEL_NAME = "qwen/qwen3-4b:free"

bot = telebot.TeleBot(BOT_TOKEN)


class ThinkingIndicator:
	def __init__(self, bot, chat_id):
		self.bot = bot
		self.chat_id = chat_id
		self.message_id = None
		self.stop_event = threading.Event()

	def start(self):
		"""–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ '–ë–æ—Ç –¥—É–º–∞–µ—Ç...'"""
		msg = self.bot.send_message(self.chat_id, "ü§ñ –ö–æ—Ç–∏–∫ –¥—É–º–∞–µ—Ç...")
		self.message_id = msg.message_id

	def stop(self):
		"""–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ '–ë–æ—Ç –¥—É–º–∞–µ—Ç...'"""
		if self.message_id:
			try:
				self.bot.delete_message(self.chat_id, self.message_id)
			except:
				pass  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
		self.stop_event.set()


def generate_with_ai(prompt):
	headers = {
		"Authorization": f"Bearer {OPENROUTER_API_KEY}",
		"Content-Type": "application/json"
	}

	payload = {
		"model": MODEL_NAME,
		"messages": [{"role": "user", "content": prompt}],
		"temperature": 0.7
	}

	try:
		response = requests.post(
			"https://openrouter.ai/api/v1/chat/completions",
			headers=headers,
			data=json.dumps(payload),
			timeout=30)

		if response.status_code == 200:
			return response.json()['choices'][0]['message']['content']
		return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò"

	except Exception as e:
		return f"–û—à–∏–±–∫–∞: {str(e)}"


@bot.message_handler(commands=['start'])
def send_welcome(message):
	bot.send_chat_action(message.chat.id, 'typing')
	time.sleep(1)
	welcome_text = """
–ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –±–æ—Ç —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏:
- –û—Ç–≤–µ—á–∞—é –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
- –†–∞—Å—Å–∫–∞–∑—ã–≤–∞—é –∞–Ω–µ–∫–¥–æ—Ç—ã (/anekdot)
- –ú–æ–≥—É –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–µ—Å–µ–¥—É

–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
"""
	bot.send_message(message.chat.id, welcome_text)


@bot.message_handler(commands=['anekdot'])
def tell_joke(message):
	indicator = ThinkingIndicator(bot, message.chat.id)
	indicator.start()

	try:
		prompt = "–†–∞—Å—Å–∫–∞–∂–∏ —Å–≤–µ–∂–∏–π –∞–Ω–µ–∫–¥–æ—Ç (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π)"
		joke = generate_with_ai(prompt)
		bot.send_message(message.chat.id, joke)
	finally:
		indicator.stop()


@bot.message_handler(func=lambda message: True)
def handle_message(message):
	if "–ø—Ä–∏–≤–µ—Ç" in message.text.lower():
		bot.send_chat_action(message.chat.id, 'typing')
		time.sleep(1)
		bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! üòä")
	else:
		indicator = ThinkingIndicator(bot, message.chat.id)
		indicator.start()

		try:
			response = generate_with_ai(message.text)
			bot.send_message(message.chat.id, response)
		finally:
			indicator.stop()


bot.infinity_polling()